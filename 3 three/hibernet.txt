hibernet:

	- hibernet is a framework which is developed by gaving king in 2001
	- hibernet is an orm (object relational mapping) tool 
	- what is ORM:
		-in orm tool object will be mapped with table
		- due to ORM TOOL we can perform CRUD operation easily
		- in market there are many orm tool available
		- EJB, EJB2,struct,struct2,iBatis,TopLinks,hibernate etc.

featuresof hibernet:
1) opensource
2) automatic table creation
3) complex join
4) HQL and HCQL
5) table relation
6) query status
7) fetching technique	- ()
8) catching technique



date: 4-7-24
---------------------------------------------
what is hbm.xml?

	- in hibernate hbm.xml is an xml file which stands for hibernate mapping xml file
	- in hbm.xml object will be mapped by using xml
	- in hbm.xml <hibernate-mapping><class><id><generator><property> etc tags be used
	- in application there can be multiple hbm.xml as per object
	- this file can be located in src/main/java or classpath
	- example:
		<hibernate-mapping>
    			<class name="com.model.Student">
	    			<id name="sid" type="int">
	    				<generator class="identity"></generator>
	    			</id>
	    			<property name="sname" type="java.lang.String"></property>
	    			<property name="scity" type="java.lang.String"></property>
	    			<property name="spercentage" type="Double"></property>
    			</class>
    		</hibernate-mapping>
--------------------------------------
what is cfg.xml file
	- in hibernate cfg.xml is an xml file which stands for hibernate configuration xml file 
	- in cfg.xml configuration of hibernate will be done
	- in application there can be only one cfg.xml file because configuration will ge done once in an application
	- in cfg.xml <hibernate-configuration> <session-factory> <property> <mapping> etc tags can be used
	- default name of cfg.xml file set as hibernate.cfg.xml file
	- this file can be loaded by using configure() method of Configuration Class
	- this fiule can be located in src/main/java or classpath
	- example:
		<hibernate-configuration>
		<session-factory>
			<property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
			<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/jap67</property>
			<property name="hibernate.connection.username">root</property>
			<property name="hibernate.connection.password">Luci@714</property>
			
			<property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property> <!-- database dialect -->
			<property name="hibernate.hbm2ddl.auto">update</property> <!-- as per your mapping you want to automatically want to create table-->
			<property name="hibernate.show_sql">true</property> <!-- if you want to show query then true otherwise false -->
			<property name="hibernate.format_sql">true</property> <!--  -->
			
			<mapping resource="Student.hbm.xml"/> <!-- if you have done mapping by xml then use resource="" but if you done it by annotation in class then use class="" -->
		</session-factory>
	</hibernate-configuration> 

--------------------------------------------------------------------
	-Configuration is a class which is located in org.hibernate.cfg package.
	-by using Configuration class we can load cfg.xml fiel 
	eg:
	Configuration con = new Configuration().configure();	
-------------------------------------------------------------------
what is SessionFactory?
	- SessionFactory n interface which is located in org.hibernate package
	- instance of SessionFactory can be achived buildSessionFactory() method of Configuration class
	eg: 
	Configuration con = new Configuration().configure();	
        SessionFactory sf = con.buildSessionFactory();	
	-SessionFActory holds a logical database connection
	- SessionFactory is a thread-safe
	- SessionFactory is immutable
----------------------------------
what is Session:
	-  Session is an interface which is located in org.hibernate package
	- instance of session can be used to achive by using openSession() or getCurrentSession() method of SessionFactory interface
	- openSession() method returns instance of new Session.
	- getCurrentSession() returns existing instance of 
Session
	- by using Session we can perform CRUD operations
	- to perform CRUD operation Session interface introduced methods like save(), delete() update() saveOrUpdate() get() etc.
	-eg:
	Configuration con = new Configuration().configure();
        SessionFactory sf = con.buildSessionFactory();	
        Session session = sf.openSession();
--------------------------------------------------------------------------
what is Transaction?
	-transaction is  an interface which is located in org.hibernate package
	- instance of Transaction can be achive by using beginTransaction() or getTransaction() method of Session interface
	- beginTransaction() method returns instance of new transaction
	- getTransaction() method returns instance of existing Transaction
	- Transaction interface can be used to commit number of dml operations done by Session interface
	ex:
	Configuration con = new Configuration().configure();
        SessionFactory sf = con.buildSessionFactory();	
        Session session = sf.openSession();
        Transaction tx = session.beginTransaction();
        
        Student s1 = new Student();
        s1.setSname("rakesh2");
        s1.setScity("pune2");
        s1.setSpercentage(91.21);
        
        session.save(s1);
        
        tx.commit();	
        session.close();

----------------------------------------------------------------------

state of objects in hibernate:
1- Transient State
	- in hibernate object considered in transient state if it dosent associated with session or database yet
	- transient object also considered as a new object

2- Persistence State
	- in hibernate object considered in persistence state if it associated with session not database
	- persistence object also considered as in-processing object

3- Detached 
	in hibernate object considered in detached state if it associated with database not session anymore	
	detached object also considered as an old object
---------------------------------------------------------------
method of Session:
1)save()
	- save() method can be used to insert a record
	- save method returns a serializable id
	- save method requires transient object

2)update()
	- update method can be used to update a record
	- update() method require detached object
	
3) saveOrUpdate()
	- saveOrUpdate() method can be used to insert or update a record
	- saveOrUpdate() method insert a record if mentioned  object is transient
	- saveOrUpdate() method update a record if mentioned object is detached 

4) delete() 
	- delete() method can be used to delete a record 
	- delete() method requires detached object

5) get()
	- get method can be used to featch record
	- get method returns object or null

6) load()
	- load method can be used to featch record
	- load method returns object or exception
	- note: 
		load method can be used if we assure about object
		load method is faster than get() 
------------------------------------------------------------------------------------------------------


concocome company

Date: 5-7-24
----------------------------------------------------------------------------------
JPA API:
	- jpa stands for javax persistence api 
	- by using JPA API we can mapped object by using annotation

1) @Entity:
	-@Entity is an annotation which is located in javax.persistence package
	-this annotation can be used to denotes a class as an entity
	-in hibernate entity class considered as a table or record 
	-this annotation can be used over class name

2) @Id:
	-@Id is an annotation which is located in javax.persistence package
	- this annotation can be used to denotes a property as an Id
	- this annotation can be used over property name
	
3)@GeneratedValue
	- @GeneratedValue is anm annotation which is located in javax.persistence package
	- this annotation can be used to denotes generation type of ID
	- this annotation can be used over property name

4) @Table:
	-@Table is an annotation which is located in javax.persistence package
	- this annotation can be used to denoted user-defined name of table	
	- this annotation can be used over class name

5) @column
	-column is an annotation which is located in javax.persistence package
	- this annotation can be used to have user-defined column
	- this annotation can be used over property name 
	- by using @Column annotation we can set name,length,type column of the table
	
6) @Transient :
	- @Trnsitionis an annotion which is located in javax.persistence package
	- this annotation can be used to denotes a property as a transient property
	- inhibernate transient property will not be a part of table anymore
	- this annotion can be used over property

7) @Embeddable :
	-@Embeddable is an annotation which is located in javax.persistence package
	- this annotation can be used to denoted a class as an embeddable class
	- in hibernate embeddable class will not create a seperate table, it becomes a part of a table 
	- this annotation can be used over class name

8) @Embedded:
	- @Embedded is an annotation which is located in javax.persistence package
	- this annotation can be used to denotes embeddable property
	- this annotation can be used over property name 
	
9) @OneToOne
10) @OneToMany
11) @MAnyToMany
12) @ManyToMAny
13) @NamedQuery()
14) @Cache
15) @Cacheable
-------------------------------------------------------------------------------------------

Date: 9-7-24


HQL:
	- HQL stands for hibernate query language
	- HQL is similar like SQL and easier than SQL
	eg:
		delete from student where sid=5		-sql
		delete from Student where sid=5		-hql
	- in sql query works on table and column
	- in hql query works on class and property
	- HQL considered as a polymorphic query because as per mentioned dialecthql converted into database supported query
	- HQL works on class and property hence it is considered as an object oriented query
	- to work with HQL we can use createQuery() method of Session interface
	- createQuery method returns instance of query interface 
	
- methods of query:
1) list():	(if one or more than one objects are coming then you can use this)
	- list() method can be used to perform select quey
	- list() method returns instance of list interface
	- list() method can be used if multiple objects can be returns

2) uniqueResult():	(if only one object will return then only use this)
	- uniqueResult() method can be used to perform select query
	- uniqueResult() method returns object or null
	- uniqueResult() method can be used if single object can be returns

3) executeUpdate():
	- executeResult() method can be used to perform delete and update query
	- executeResult() method returns int value

4) setParameter():
	- setParameter() method can be used to pass parameter into query
	- setParameter() method returns instance of query
	
5) setMaxResults() 
	- setMaxResults() can be used to set limit into query
	- setMaxQuery() method returns instance of query interface

6) setFirstResult()
	- setFirtstResult() method can be used to skip no of records
	-method returns instance of query interface

7) setCacheable()	(this is very important method that we will learn later)

--------------------------------
eg:
-for displaying all the student:	
	//(without method chaining)
	Query<Student> q = session.createQuery("from Student", Student.class);
        List<Student> list = q.list();
        for(Student s: list) {

        	System.out.println(s);
        }
	// or
	//(with method chaining)
	List<Student> list = session.createQuery("from Student", Student.class).list();	
        for(Student s:list) {
        	System.out.println(s);
        }

-find student by sid:
	Query<Student> q = session.createQuery("from Student where sid=:a", Student.class);
        q.setParameter("a", 10);
        
        Student s = q.uniqueResult();
        System.out.println(s);
	
	//or

	Student s = session.createQuery("from Student where sid=:a", Student.class).setParameter("a", 10).uniqueResult();
        System.out.println(s);

-find student by sid and sname
	Query<Student> q = session.createQuery("from Student where sid=:a and sname=:b", Student.class);
        q.setParameter("a", 18);
        q.setParameter("b", "VGGGGHWOHBPPQXA");
        Student s = q.uniqueResult();
        System.out.println(s);

	//or

	Student s = session.createQuery("from Student where sid=:a and sname=:b", Student.class).setParameter("a", 18).setParameter("b", "VGGGGHWOHBPPQXA").uniqueResult();
        System.out.println(s);

-find student by percentage between 
	Query<Student> q = session.createQuery("from Student where spercentage between :a and :b", Student.class);
        q.setParameter("a", 12.0);
        q.setParameter("b", 15.0);
        List<Student> list = q.list();
        for(Student s: list) {
        	System.out.println(s);
        }
	
	//or

	List<Student> list = session.createQuery("from Student where spercentage between :a and :b", Student.class).setParameter("a", 12.0).setParameter("b", 15.0).list();
        for(Student s: list) {
        	System.out.println(s);
        }


------------------------------------------------------------------------------------------------------------------------

date 10-7-24
------------

-paginaton


-delete student by sid :
	int check = session.createQuery("delete from Student where sid=:a").setParameter("a", 5).executeUpdate();
	System.out.println(check);


-update student
	example
	//or
	example

---------------------------------------------------
HCQL
	we use HCQL for display because we have many complex queries in display commands
	it performs complex validations easily

	example:
	//(for display all)
	List<Student> list = session.createCriteria(Student.class).list();
	for(Student s: list) {
		System.out.println(s);
	}
	//(by asending order of "sname")
	List<Student> list = session.createCriteria(Student.class)
				.addOrder(Order.asc("sname"))
				.list();
		for(Student s: list) {
			System.out.println(s);
		}
 
------------------------------------------------------------------------------------------------------------------------------------------------------

date: 11-7-24
-------------
	
HCQL:
	-hcql stands for hibernate criretia query language
	-hcql can be sued to perform complex validations easily
	-by suing hcql we can perform display operations only
	-to work with hcql, we can use creteCriteria method of Session interface
	-createCriteria() method reurns instance of Criteria interface

methods of Criteria interface
1) list()
	list() method returns instance of list interface
	list() can be used if multiple object can be returned

2) uniqueResult()
	uniqueResult() method returns object or null
	uniqueResult() method can be used if single object can be return

3) add()
	add() method can be used to add restrictions into query
	restrictions can be add by using Restrictions class
	Restriction is a class which is located in org.hibernate.riterion package
	Restrictions class contains static methods like it(), le(), gt(), ge(),  eq(), ne(), in(), between(), like(), and() or() etc.
	add() method returns instance of Criteria interface

4) addOrder()
	addOrder() methodcan be sued to add order into query
	to add order we can use order class
	order is a class which is located in org.hibernate.Criteria package
	Order class contains static method like asc() dec()
	adddOrder() method returns instance of Criteria interface

5) setProjection
	- setProjection() method can be used for aggregate function 
	- to use aggregate function we can use Projections class
	- projections is a class which is located in org.hibernate.criterion package
	- Projections class contains static method like sum() count() avg() min() max() property() etc.
	- setProjection() method returns instance of Criteria interface 	

6) setMaxResults()
	- setMaxResults method can be used to set limit into query
	- setMaxResults method returns instance of criteria interface

7) setFirstResult()
	- setFirstResult() method used to skip number of records
	- setFirstResult() method return instance of Criteria interface
	
8) setCacheable()
-------------------------------------------------------------------------------------------------------------------

example:
	
1)display all student
	//method without chaining example
	//or
	//method chaining example

2)display student by sid

3) display student by sid and sname
	
4)

5)

6) display student by sid not lessthan

7) display student by sid between

11) display student by spercentage less than order by scity

12) display all name of student

13) display highest percentage 

---------------------------------------------------------------------------------------------------------------------------------------------------
date: 12 - 7 -24
----------------

in HCQL:

1) find higest percentage of student 

2) find second higest percentage student

find third higest percentage student


	
	















